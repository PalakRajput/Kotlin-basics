//If we don't specify var/val keyword, the properties can't be accessed outside the constructor and they are treated as the params passed to constructor
/**
 * KDoc comment
 */
//color property has a default value so it is not mandatory to pass it when creating object.
class Flower(var name: String, var color: String = "Pink") {
    //Class/member function
    fun printValues() {
        println("Flower properties: $name $color")
    }

    init {
        println("Hey! I am init block(body of primary constructor since primary constructor cannot have any executable code. I am executed immediately after primary constructor.")
    }

    init {
        println("Second init block, we are executed in the sequence we are defined.")
    }
}

class SampleWithoutPrimaryConstructor {
    init {
        println("Hey! I am executed even without the primary constructor because primary constructor is called implicitly from secondary constructor")
    }

    //    var <propertyName>[: <PropertyType>] [= <property_initializer>]
//    [<getter>]
//    [<setter>]
//    There should not be anything present between property and getter/setter declaration otherwise there will be compile time error.
    var name: String
        set(value) {
            field = value
        }
        get() = field
    var age: Int
        //Getter and setters are generated by default in kotlin with the same accessibility as the field
        //In the below code the setter is made private and default getter is provided though it is redundant because it is generated by default so it can be omitted also.
        private set
        get() {
            return field
        }

    //Val on secondary constructor is not allowed
    constructor(name: String, age: Int) {
        this.name = name
        this.age = age
    }

    fun printValues() {
        println("Properties: $name $age")
    }
}

class SampleWithBothPrimaryAndSecondaryConstructor(private val name: String, private val age: Int) {
    private var color: String? = null

    //If primary constructor is present then explicitly call it using this(...) from secondary constructor
    constructor(name: String, age: Int, color: String) : this(name, age) {
        this.color = color
    }

    fun printValues() {
        println("$name - $age - $color")
    }
}

fun main() {
    val f1 = Flower("Rose")
    val f2 = Flower("Sunflower", "Yellow")
    f1.printValues()
    f2.printValues()

    val s1 = SampleWithoutPrimaryConstructor("John", 20)
    //s1.age = 20 -> since the setter is set to private we cannot change the value here
    s1.name = "Jess"
    s1.printValues()

    val s2 = SampleWithBothPrimaryAndSecondaryConstructor("John", 20, "Red")
    s2.printValues()
}